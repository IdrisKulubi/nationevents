import { auth } from "@/auth";
import db from "@/db/drizzle";
import { users } from "@/db/schema";
import { eq } from "drizzle-orm";
import { type NextRequest, NextResponse } from "next/server";

// This route performs database operations (updating user roles) and must therefore
// run on the Node.js runtime, not the Edge runtime.
export const runtime = 'nodejs';

export async function GET(request: NextRequest) {
  const session = await auth();

  if (!session?.user?.id) {
    // This case should ideally not be hit if called as a callback,
    // but as a safeguard, redirect to login.
    return NextResponse.redirect(new URL("/login", request.url));
  }
  
  const user = await db.query.users.findFirst({
    where: eq(users.id, session.user.id),
  });

  if (!user) {
    // Safeguard for a user existing in session but not in DB.
    return NextResponse.redirect(new URL("/login?error=UserNotFound", request.url));
  }

  // If the user's role is not yet 'employer', update it.
  // This is now the single point of truth for the role change after a company sign-in.
  if (user.role !== 'employer') {
    console.log(`[AUTH_FLOW] Onboard handler: User role is '${user.role}'. Updating to 'employer'.`);
    await db
      .update(users)
      .set({ role: 'employer', updatedAt: new Date() })
      .where(eq(users.id, user.id));
  } else {
    console.log(`[AUTH_FLOW] Onboard handler: User role is already 'employer'. No update needed.`);
  }

  // Now that the role is guaranteed to be correct in the DB, 
  // redirect to the employer setup page. The session for this next request
  // will be freshly generated by NextAuth based on the updated database state.
  return NextResponse.redirect(new URL("/employer/setup", request.url));
} 